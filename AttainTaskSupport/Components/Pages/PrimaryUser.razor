@page "/primaryUser"
@layout PageLayout
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

<div class="head">
    <h2>Create Primary User</h2>
</div>

<EditForm Model="user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="forms">
        <fieldset class="firstForm">
            <div>
                <label for="fname">Full Name:</label>
                <InputText id="fname" @bind-Value="user.FullName" />
            </div>
            <div>
                <label for="email">Email:</label>
                <InputText id="email" @bind-Value="user.Email" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div>
                <label for="pwd">Password:</label>
                <InputText id="pwd" @bind-Value="user.Password" type="password" />
            </div>
            <div>
                <label for="confirmPwd">Confirm Password:</label>
                <InputText id="confirmPwd" @bind-Value="user.ConfirmPassword" type="password" />
                <ValidationMessage For="@(() => user.ConfirmPassword)" />
            </div>
        </fieldset>

        <fieldset class="secondForm">
            <h4><u>
                    <center>Project</center>
                </u></h4>

            <label for="title">Title:</label>
            <InputText id="title" @bind-Value="user.Title" />

            <label for="time">Timeline:</label>
            <InputText id="time" @bind-Value="user.Timeline" />

            <label for="description">Description:</label>
            <InputTextArea id="description" @bind-Value="user.Description" />

        </fieldset>
    </div>

    <div class="btns">
        <button @onclick="goBack" class="btn back">Back</button>

        <button type="submit" class="btn create">Create User</button>
    </div>

</EditForm>


@code {
    private PrimaryUserModel user = new();

    private void HandleValidSubmit()
    {
        Console.WriteLine($"User: {user.FullName}, {user.Email}");
    }

    public class PrimaryUserModel
    {
        [Required(ErrorMessage = "Full name is required.")]
        public string FullName { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords must match.")]
        public string ConfirmPassword { get; set; }

        public string Title { get; set; }
        public string Timeline { get; set; }
        public string Description { get; set; }
    }

    private void goBack()
    {
        NavigationManager.NavigateTo("/admin");
    }
}
